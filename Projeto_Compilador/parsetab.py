
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDrightNOTnonassocEQUALNEQUALLESSTHENLESSEQUALSGREATTHANGREATEQUALSleftPLUSMINUSleftMULTDIVIDEMODULODIV_INTAND ARRAY ASSIGN BEGIN BOOLEAN_TYPE CHAR_TYPE DIVIDE DIV_INT DO DOISPONTOS DOT DOWNTO ELSE END EQUAL FALSE FOR GREATEQUALS GREATTHAN ID IF INTEGER_TYPE LENGTH LESSEQUALS LESSTHEN LPAREN LSQBRACKET MINUS MODULO MULT NEQUAL NOT NUMBER OF OR PLUS PROGRAM RANGE READLN REAL_LITERAL REAL_TYPE RPAREN RSQBRACKET SEMI STRING_LITERAL STRING_TYPE THEN TO TRUE VAR VIRG WHILE WRITE WRITELNPrograma : PROGRAM ID SEMI opt_variable block DOTopt_variable : variables\n                    | emptyvariables : VAR varsvars : listVar DOISPONTOS datatype SEMIvars : listVar DOISPONTOS datatype SEMI varslistVar : IDlistVar : ID VIRG listVardatatype : simpleTypedatatype : structuredTypesimpleType : INTEGER_TYPE\n                  | BOOLEAN_TYPE\n                  | STRING_TYPE\n                  | REAL_TYPE\n                  | CHAR_TYPEstructuredType : arrayTypearrayType : ARRAY LSQBRACKET NUMBER RANGE NUMBER RSQBRACKET OF simpleTypeempty :variable : IDvariable : ID LSQBRACKET expression RSQBRACKETblock : BEGIN stmt_list opt_semi ENDopt_semi : SEMI\n                | emptystmt_list : stmtstmt_list : stmt_list SEMI stmtstmt : assign_stmt\n            | conditional_stmt\n            | cicle_stmt\n            | readLn_stmt\n            | write_stmt\n            | writeln_stmtassign_stmt : variable ASSIGN expressionexpression : logical_or_exprlogical_or_expr : logical_or_expr OR logical_and_exprlogical_or_expr : logical_and_exprlogical_and_expr : logical_and_expr AND logical_not_exprlogical_and_expr : logical_not_exprlogical_not_expr : NOT logical_not_exprlogical_not_expr : relational_exprrelational_expr : simple_exprelational_expr : simple_exp relational_operator simple_exprelational_operator : EQUAL\n                            | NEQUAL\n                            | LESSTHEN\n                            | LESSEQUALS\n                            | GREATTHAN\n                            | GREATEQUALSsimple_exp : simple_exp add_op termosimple_exp : termoadd_op : PLUSadd_op : MINUStermo : termo mul_op fatortermo : fatormul_op : MULTmul_op : DIVIDEmul_op : MODULOmul_op : DIV_INTfator : LENGTH LPAREN expression RPARENfator : LPAREN expression RPARENfator : variablefator : NUMBERfator : REAL_LITERALfator : STRING_LITERALfator : TRUEfator : FALSEreadLn_stmt : READLN LPAREN variable RPARENwrite_stmt : WRITE LPAREN output_args RPARENwriteln_stmt : WRITELN LPAREN output_args RPARENwriteln_stmt : WRITELN LPAREN RPARENoutput_args : output_itemoutput_args : output_item VIRG output_argsoutput_item : STRING_LITERALoutput_item : variableconditional_stmt : if_stmtif_stmt : IF expression THEN stmtif_stmt : IF expression THEN stmt ELSE stmtcicle_stmt : while_stmt\n                  | for_stmtwhile_stmt : WHILE expression DO cicle_bodycicle_body : block\n                  | stmtfor_stmt : FOR assign_stmt TO simple_exp DO cicle_bodyfor_stmt : FOR assign_stmt DOWNTO simple_exp DO cicle_body'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,14,],[0,-1,]),'ID':([2,8,10,31,32,33,35,37,39,40,41,42,43,48,54,85,86,87,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,106,107,108,109,113,132,134,135,],[3,13,30,30,30,30,13,30,30,30,30,30,30,30,30,30,30,30,30,30,-42,-43,-44,-45,-46,-47,-50,-51,30,-54,-55,-56,-57,30,30,30,30,13,30,30,30,30,]),'SEMI':([3,15,16,17,18,19,20,21,22,24,25,26,30,45,46,47,49,50,51,52,55,56,57,58,59,60,63,64,65,66,67,68,69,70,71,74,75,76,83,88,111,112,114,115,116,117,118,119,120,121,123,124,125,126,133,137,138,139,143,],[4,37,-24,-26,-27,-28,-29,-30,-31,-74,-77,-78,-19,-33,-35,-37,-39,-40,-49,-53,-60,-61,-62,-63,-64,-65,109,-9,-10,-11,-12,-13,-14,-15,-16,-21,-25,-32,-69,-38,-66,-67,-68,-20,-75,-34,-36,-41,-48,-52,-59,-79,-80,-81,-58,-76,-82,-83,-17,]),'VAR':([4,],[8,]),'BEGIN':([4,5,6,7,11,106,109,129,134,135,],[-18,10,-2,-3,-4,10,-5,-6,10,10,]),'DOT':([9,74,],[14,-21,]),'READLN':([10,37,85,106,132,134,135,],[27,27,27,27,27,27,27,]),'WRITE':([10,37,85,106,132,134,135,],[28,28,28,28,28,28,28,]),'WRITELN':([10,37,85,106,132,134,135,],[29,29,29,29,29,29,29,]),'IF':([10,37,85,106,132,134,135,],[31,31,31,31,31,31,31,]),'WHILE':([10,37,85,106,132,134,135,],[32,32,32,32,32,32,32,]),'FOR':([10,37,85,106,132,134,135,],[33,33,33,33,33,33,33,]),'DOISPONTOS':([12,13,73,],[34,-7,-8,]),'VIRG':([13,30,79,80,81,115,],[35,-19,113,-72,-73,-20,]),'END':([15,16,17,18,19,20,21,22,24,25,26,30,36,37,38,45,46,47,49,50,51,52,55,56,57,58,59,60,74,75,76,83,88,111,112,114,115,116,117,118,119,120,121,123,124,125,126,133,137,138,139,],[-18,-24,-26,-27,-28,-29,-30,-31,-74,-77,-78,-19,74,-22,-23,-33,-35,-37,-39,-40,-49,-53,-60,-61,-62,-63,-64,-65,-21,-25,-32,-69,-38,-66,-67,-68,-20,-75,-34,-36,-41,-48,-52,-59,-79,-80,-81,-58,-76,-82,-83,]),'ELSE':([17,18,19,20,21,22,24,25,26,30,45,46,47,49,50,51,52,55,56,57,58,59,60,74,76,83,88,111,112,114,115,116,117,118,119,120,121,123,124,125,126,133,137,138,139,],[-26,-27,-28,-29,-30,-31,-74,-77,-78,-19,-33,-35,-37,-39,-40,-49,-53,-60,-61,-62,-63,-64,-65,-21,-32,-69,-38,-66,-67,-68,-20,132,-34,-36,-41,-48,-52,-59,-79,-80,-81,-58,-76,-82,-83,]),'ASSIGN':([23,30,115,],[39,-19,-20,]),'LPAREN':([27,28,29,31,32,39,43,48,53,54,86,87,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,107,108,],[40,41,42,54,54,54,54,54,104,54,54,54,54,54,-42,-43,-44,-45,-46,-47,-50,-51,54,-54,-55,-56,-57,54,54,54,]),'MULT':([30,51,52,55,56,57,58,59,60,115,120,121,123,133,],[-19,100,-53,-60,-61,-62,-63,-64,-65,-20,100,-52,-59,-58,]),'DIVIDE':([30,51,52,55,56,57,58,59,60,115,120,121,123,133,],[-19,101,-53,-60,-61,-62,-63,-64,-65,-20,101,-52,-59,-58,]),'MODULO':([30,51,52,55,56,57,58,59,60,115,120,121,123,133,],[-19,102,-53,-60,-61,-62,-63,-64,-65,-20,102,-52,-59,-58,]),'DIV_INT':([30,51,52,55,56,57,58,59,60,115,120,121,123,133,],[-19,103,-53,-60,-61,-62,-63,-64,-65,-20,103,-52,-59,-58,]),'EQUAL':([30,50,51,52,55,56,57,58,59,60,115,120,121,123,133,],[-19,91,-49,-53,-60,-61,-62,-63,-64,-65,-20,-48,-52,-59,-58,]),'NEQUAL':([30,50,51,52,55,56,57,58,59,60,115,120,121,123,133,],[-19,92,-49,-53,-60,-61,-62,-63,-64,-65,-20,-48,-52,-59,-58,]),'LESSTHEN':([30,50,51,52,55,56,57,58,59,60,115,120,121,123,133,],[-19,93,-49,-53,-60,-61,-62,-63,-64,-65,-20,-48,-52,-59,-58,]),'LESSEQUALS':([30,50,51,52,55,56,57,58,59,60,115,120,121,123,133,],[-19,94,-49,-53,-60,-61,-62,-63,-64,-65,-20,-48,-52,-59,-58,]),'GREATTHAN':([30,50,51,52,55,56,57,58,59,60,115,120,121,123,133,],[-19,95,-49,-53,-60,-61,-62,-63,-64,-65,-20,-48,-52,-59,-58,]),'GREATEQUALS':([30,50,51,52,55,56,57,58,59,60,115,120,121,123,133,],[-19,96,-49,-53,-60,-61,-62,-63,-64,-65,-20,-48,-52,-59,-58,]),'PLUS':([30,50,51,52,55,56,57,58,59,60,115,119,120,121,123,127,128,133,],[-19,97,-49,-53,-60,-61,-62,-63,-64,-65,-20,97,-48,-52,-59,97,97,-58,]),'MINUS':([30,50,51,52,55,56,57,58,59,60,115,119,120,121,123,127,128,133,],[-19,98,-49,-53,-60,-61,-62,-63,-64,-65,-20,98,-48,-52,-59,98,98,-58,]),'AND':([30,46,47,49,50,51,52,55,56,57,58,59,60,88,115,117,118,119,120,121,123,133,],[-19,87,-37,-39,-40,-49,-53,-60,-61,-62,-63,-64,-65,-38,-20,87,-36,-41,-48,-52,-59,-58,]),'OR':([30,45,46,47,49,50,51,52,55,56,57,58,59,60,88,115,117,118,119,120,121,123,133,],[-19,86,-35,-37,-39,-40,-49,-53,-60,-61,-62,-63,-64,-65,-38,-20,-34,-36,-41,-48,-52,-59,-58,]),'THEN':([30,44,45,46,47,49,50,51,52,55,56,57,58,59,60,88,115,117,118,119,120,121,123,133,],[-19,85,-33,-35,-37,-39,-40,-49,-53,-60,-61,-62,-63,-64,-65,-38,-20,-34,-36,-41,-48,-52,-59,-58,]),'DO':([30,45,46,47,49,50,51,52,55,56,57,58,59,60,61,88,115,117,118,119,120,121,123,127,128,133,],[-19,-33,-35,-37,-39,-40,-49,-53,-60,-61,-62,-63,-64,-65,106,-38,-20,-34,-36,-41,-48,-52,-59,134,135,-58,]),'TO':([30,45,46,47,49,50,51,52,55,56,57,58,59,60,62,76,88,115,117,118,119,120,121,123,133,],[-19,-33,-35,-37,-39,-40,-49,-53,-60,-61,-62,-63,-64,-65,107,-32,-38,-20,-34,-36,-41,-48,-52,-59,-58,]),'DOWNTO':([30,45,46,47,49,50,51,52,55,56,57,58,59,60,62,76,88,115,117,118,119,120,121,123,133,],[-19,-33,-35,-37,-39,-40,-49,-53,-60,-61,-62,-63,-64,-65,108,-32,-38,-20,-34,-36,-41,-48,-52,-59,-58,]),'RPAREN':([30,42,45,46,47,49,50,51,52,55,56,57,58,59,60,77,78,79,80,81,82,88,105,115,117,118,119,120,121,122,123,131,133,],[-19,83,-33,-35,-37,-39,-40,-49,-53,-60,-61,-62,-63,-64,-65,111,112,-70,-72,-73,114,-38,123,-20,-34,-36,-41,-48,-52,133,-59,-71,-58,]),'RSQBRACKET':([30,45,46,47,49,50,51,52,55,56,57,58,59,60,84,88,115,117,118,119,120,121,123,133,140,],[-19,-33,-35,-37,-39,-40,-49,-53,-60,-61,-62,-63,-64,-65,115,-38,-20,-34,-36,-41,-48,-52,-59,-58,141,]),'LSQBRACKET':([30,72,],[43,110,]),'NOT':([31,32,39,43,48,54,86,87,104,],[48,48,48,48,48,48,48,48,48,]),'LENGTH':([31,32,39,43,48,54,86,87,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,107,108,],[53,53,53,53,53,53,53,53,53,53,-42,-43,-44,-45,-46,-47,-50,-51,53,-54,-55,-56,-57,53,53,53,]),'NUMBER':([31,32,39,43,48,54,86,87,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,107,108,110,136,],[56,56,56,56,56,56,56,56,56,56,-42,-43,-44,-45,-46,-47,-50,-51,56,-54,-55,-56,-57,56,56,56,130,140,]),'REAL_LITERAL':([31,32,39,43,48,54,86,87,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,107,108,],[57,57,57,57,57,57,57,57,57,57,-42,-43,-44,-45,-46,-47,-50,-51,57,-54,-55,-56,-57,57,57,57,]),'STRING_LITERAL':([31,32,39,41,42,43,48,54,86,87,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,107,108,113,],[58,58,58,80,80,58,58,58,58,58,58,58,-42,-43,-44,-45,-46,-47,-50,-51,58,-54,-55,-56,-57,58,58,58,80,]),'TRUE':([31,32,39,43,48,54,86,87,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,107,108,],[59,59,59,59,59,59,59,59,59,59,-42,-43,-44,-45,-46,-47,-50,-51,59,-54,-55,-56,-57,59,59,59,]),'FALSE':([31,32,39,43,48,54,86,87,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,107,108,],[60,60,60,60,60,60,60,60,60,60,-42,-43,-44,-45,-46,-47,-50,-51,60,-54,-55,-56,-57,60,60,60,]),'INTEGER_TYPE':([34,142,],[66,66,]),'BOOLEAN_TYPE':([34,142,],[67,67,]),'STRING_TYPE':([34,142,],[68,68,]),'REAL_TYPE':([34,142,],[69,69,]),'CHAR_TYPE':([34,142,],[70,70,]),'ARRAY':([34,],[72,]),'RANGE':([130,],[136,]),'OF':([141,],[142,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'Programa':([0,],[1,]),'opt_variable':([4,],[5,]),'variables':([4,],[6,]),'empty':([4,15,],[7,38,]),'block':([5,106,134,135,],[9,125,125,125,]),'vars':([8,109,],[11,129,]),'listVar':([8,35,109,],[12,73,12,]),'stmt_list':([10,],[15,]),'stmt':([10,37,85,106,132,134,135,],[16,75,116,126,137,126,126,]),'assign_stmt':([10,33,37,85,106,132,134,135,],[17,62,17,17,17,17,17,17,]),'conditional_stmt':([10,37,85,106,132,134,135,],[18,18,18,18,18,18,18,]),'cicle_stmt':([10,37,85,106,132,134,135,],[19,19,19,19,19,19,19,]),'readLn_stmt':([10,37,85,106,132,134,135,],[20,20,20,20,20,20,20,]),'write_stmt':([10,37,85,106,132,134,135,],[21,21,21,21,21,21,21,]),'writeln_stmt':([10,37,85,106,132,134,135,],[22,22,22,22,22,22,22,]),'variable':([10,31,32,33,37,39,40,41,42,43,48,54,85,86,87,89,90,99,104,106,107,108,113,132,134,135,],[23,55,55,23,23,55,77,81,81,55,55,55,23,55,55,55,55,55,55,23,55,55,81,23,23,23,]),'if_stmt':([10,37,85,106,132,134,135,],[24,24,24,24,24,24,24,]),'while_stmt':([10,37,85,106,132,134,135,],[25,25,25,25,25,25,25,]),'for_stmt':([10,37,85,106,132,134,135,],[26,26,26,26,26,26,26,]),'opt_semi':([15,],[36,]),'expression':([31,32,39,43,54,104,],[44,61,76,84,105,122,]),'logical_or_expr':([31,32,39,43,54,104,],[45,45,45,45,45,45,]),'logical_and_expr':([31,32,39,43,54,86,104,],[46,46,46,46,46,117,46,]),'logical_not_expr':([31,32,39,43,48,54,86,87,104,],[47,47,47,47,88,47,47,118,47,]),'relational_expr':([31,32,39,43,48,54,86,87,104,],[49,49,49,49,49,49,49,49,49,]),'simple_exp':([31,32,39,43,48,54,86,87,89,104,107,108,],[50,50,50,50,50,50,50,50,119,50,127,128,]),'termo':([31,32,39,43,48,54,86,87,89,90,104,107,108,],[51,51,51,51,51,51,51,51,51,120,51,51,51,]),'fator':([31,32,39,43,48,54,86,87,89,90,99,104,107,108,],[52,52,52,52,52,52,52,52,52,52,121,52,52,52,]),'datatype':([34,],[63,]),'simpleType':([34,142,],[64,143,]),'structuredType':([34,],[65,]),'arrayType':([34,],[71,]),'output_args':([41,42,113,],[78,82,131,]),'output_item':([41,42,113,],[79,79,79,]),'relational_operator':([50,],[89,]),'add_op':([50,119,127,128,],[90,90,90,90,]),'mul_op':([51,120,],[99,99,]),'cicle_body':([106,134,135,],[124,138,139,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> Programa","S'",1,None,None,None),
  ('Programa -> PROGRAM ID SEMI opt_variable block DOT','Programa',6,'p_programa','pascal_yacc.py',22),
  ('opt_variable -> variables','opt_variable',1,'p_opt_variable','pascal_yacc.py',27),
  ('opt_variable -> empty','opt_variable',1,'p_opt_variable','pascal_yacc.py',28),
  ('variables -> VAR vars','variables',2,'p_variables','pascal_yacc.py',36),
  ('vars -> listVar DOISPONTOS datatype SEMI','vars',4,'p_vars_single','pascal_yacc.py',42),
  ('vars -> listVar DOISPONTOS datatype SEMI vars','vars',5,'p_vars_multiple','pascal_yacc.py',49),
  ('listVar -> ID','listVar',1,'p_listVar_single','pascal_yacc.py',55),
  ('listVar -> ID VIRG listVar','listVar',3,'p_listVar_multiple','pascal_yacc.py',60),
  ('datatype -> simpleType','datatype',1,'p_datatype_simple','pascal_yacc.py',66),
  ('datatype -> structuredType','datatype',1,'p_datatype_structured','pascal_yacc.py',69),
  ('simpleType -> INTEGER_TYPE','simpleType',1,'p_simpleType','pascal_yacc.py',74),
  ('simpleType -> BOOLEAN_TYPE','simpleType',1,'p_simpleType','pascal_yacc.py',75),
  ('simpleType -> STRING_TYPE','simpleType',1,'p_simpleType','pascal_yacc.py',76),
  ('simpleType -> REAL_TYPE','simpleType',1,'p_simpleType','pascal_yacc.py',77),
  ('simpleType -> CHAR_TYPE','simpleType',1,'p_simpleType','pascal_yacc.py',78),
  ('structuredType -> arrayType','structuredType',1,'p_structuredType','pascal_yacc.py',83),
  ('arrayType -> ARRAY LSQBRACKET NUMBER RANGE NUMBER RSQBRACKET OF simpleType','arrayType',8,'p_arrayType','pascal_yacc.py',88),
  ('empty -> <empty>','empty',0,'p_empty','pascal_yacc.py',93),
  ('variable -> ID','variable',1,'p_variable_simple','pascal_yacc.py',97),
  ('variable -> ID LSQBRACKET expression RSQBRACKET','variable',4,'p_variable_array','pascal_yacc.py',101),
  ('block -> BEGIN stmt_list opt_semi END','block',4,'p_block','pascal_yacc.py',108),
  ('opt_semi -> SEMI','opt_semi',1,'p_opt_semi','pascal_yacc.py',112),
  ('opt_semi -> empty','opt_semi',1,'p_opt_semi','pascal_yacc.py',113),
  ('stmt_list -> stmt','stmt_list',1,'p_stmt_list_single','pascal_yacc.py',119),
  ('stmt_list -> stmt_list SEMI stmt','stmt_list',3,'p_stmt_list_multiple','pascal_yacc.py',124),
  ('stmt -> assign_stmt','stmt',1,'p_stmt','pascal_yacc.py',138),
  ('stmt -> conditional_stmt','stmt',1,'p_stmt','pascal_yacc.py',139),
  ('stmt -> cicle_stmt','stmt',1,'p_stmt','pascal_yacc.py',140),
  ('stmt -> readLn_stmt','stmt',1,'p_stmt','pascal_yacc.py',141),
  ('stmt -> write_stmt','stmt',1,'p_stmt','pascal_yacc.py',142),
  ('stmt -> writeln_stmt','stmt',1,'p_stmt','pascal_yacc.py',143),
  ('assign_stmt -> variable ASSIGN expression','assign_stmt',3,'p_assign_stmt','pascal_yacc.py',148),
  ('expression -> logical_or_expr','expression',1,'p_expression','pascal_yacc.py',153),
  ('logical_or_expr -> logical_or_expr OR logical_and_expr','logical_or_expr',3,'p_logical_or','pascal_yacc.py',158),
  ('logical_or_expr -> logical_and_expr','logical_or_expr',1,'p_logical_or_single','pascal_yacc.py',161),
  ('logical_and_expr -> logical_and_expr AND logical_not_expr','logical_and_expr',3,'p_logical_and','pascal_yacc.py',166),
  ('logical_and_expr -> logical_not_expr','logical_and_expr',1,'p_logical_and_single','pascal_yacc.py',170),
  ('logical_not_expr -> NOT logical_not_expr','logical_not_expr',2,'p_logical_not','pascal_yacc.py',175),
  ('logical_not_expr -> relational_expr','logical_not_expr',1,'p_logical_not_rel','pascal_yacc.py',179),
  ('relational_expr -> simple_exp','relational_expr',1,'p_relational_expr_simple','pascal_yacc.py',184),
  ('relational_expr -> simple_exp relational_operator simple_exp','relational_expr',3,'p_relational_expr_rel','pascal_yacc.py',188),
  ('relational_operator -> EQUAL','relational_operator',1,'p_relational_operator','pascal_yacc.py',193),
  ('relational_operator -> NEQUAL','relational_operator',1,'p_relational_operator','pascal_yacc.py',194),
  ('relational_operator -> LESSTHEN','relational_operator',1,'p_relational_operator','pascal_yacc.py',195),
  ('relational_operator -> LESSEQUALS','relational_operator',1,'p_relational_operator','pascal_yacc.py',196),
  ('relational_operator -> GREATTHAN','relational_operator',1,'p_relational_operator','pascal_yacc.py',197),
  ('relational_operator -> GREATEQUALS','relational_operator',1,'p_relational_operator','pascal_yacc.py',198),
  ('simple_exp -> simple_exp add_op termo','simple_exp',3,'p_simple_exp_binop','pascal_yacc.py',203),
  ('simple_exp -> termo','simple_exp',1,'p_simple_exp_termo','pascal_yacc.py',208),
  ('add_op -> PLUS','add_op',1,'p_add_op_plus','pascal_yacc.py',212),
  ('add_op -> MINUS','add_op',1,'p_add_op_minus','pascal_yacc.py',216),
  ('termo -> termo mul_op fator','termo',3,'p_termo_binop','pascal_yacc.py',221),
  ('termo -> fator','termo',1,'p_termo_factor','pascal_yacc.py',226),
  ('mul_op -> MULT','mul_op',1,'p_mul_op_mult','pascal_yacc.py',231),
  ('mul_op -> DIVIDE','mul_op',1,'p_mul_op_div','pascal_yacc.py',235),
  ('mul_op -> MODULO','mul_op',1,'p_mul_op_mod','pascal_yacc.py',239),
  ('mul_op -> DIV_INT','mul_op',1,'p_mul_op_divint','pascal_yacc.py',243),
  ('fator -> LENGTH LPAREN expression RPAREN','fator',4,'p_fator_length','pascal_yacc.py',248),
  ('fator -> LPAREN expression RPAREN','fator',3,'p_fator_group','pascal_yacc.py',253),
  ('fator -> variable','fator',1,'p_fator_variable','pascal_yacc.py',258),
  ('fator -> NUMBER','fator',1,'p_fator_number','pascal_yacc.py',262),
  ('fator -> REAL_LITERAL','fator',1,'p_fator_real','pascal_yacc.py',267),
  ('fator -> STRING_LITERAL','fator',1,'p_fator_string','pascal_yacc.py',272),
  ('fator -> TRUE','fator',1,'p_fator_true','pascal_yacc.py',277),
  ('fator -> FALSE','fator',1,'p_fator_false','pascal_yacc.py',282),
  ('readLn_stmt -> READLN LPAREN variable RPAREN','readLn_stmt',4,'p_readLn_stmt','pascal_yacc.py',290),
  ('write_stmt -> WRITE LPAREN output_args RPAREN','write_stmt',4,'p_write_stmt','pascal_yacc.py',295),
  ('writeln_stmt -> WRITELN LPAREN output_args RPAREN','writeln_stmt',4,'p_writeln_stmt_not_empty','pascal_yacc.py',300),
  ('writeln_stmt -> WRITELN LPAREN RPAREN','writeln_stmt',3,'p_writeln_stmt_empty','pascal_yacc.py',305),
  ('output_args -> output_item','output_args',1,'p_output_args_single','pascal_yacc.py',310),
  ('output_args -> output_item VIRG output_args','output_args',3,'p_output_args_multiple','pascal_yacc.py',315),
  ('output_item -> STRING_LITERAL','output_item',1,'p_output_item_string','pascal_yacc.py',320),
  ('output_item -> variable','output_item',1,'p_output_item_variable','pascal_yacc.py',325),
  ('conditional_stmt -> if_stmt','conditional_stmt',1,'p_conditional_stmt','pascal_yacc.py',331),
  ('if_stmt -> IF expression THEN stmt','if_stmt',4,'p_if_then','pascal_yacc.py',335),
  ('if_stmt -> IF expression THEN stmt ELSE stmt','if_stmt',6,'p_if_then_else','pascal_yacc.py',339),
  ('cicle_stmt -> while_stmt','cicle_stmt',1,'p_cicle_stmt','pascal_yacc.py',343),
  ('cicle_stmt -> for_stmt','cicle_stmt',1,'p_cicle_stmt','pascal_yacc.py',344),
  ('while_stmt -> WHILE expression DO cicle_body','while_stmt',4,'p_while_stmt','pascal_yacc.py',349),
  ('cicle_body -> block','cicle_body',1,'p_cicle_body','pascal_yacc.py',355),
  ('cicle_body -> stmt','cicle_body',1,'p_cicle_body','pascal_yacc.py',356),
  ('for_stmt -> FOR assign_stmt TO simple_exp DO cicle_body','for_stmt',6,'p_for_stmt_to','pascal_yacc.py',361),
  ('for_stmt -> FOR assign_stmt DOWNTO simple_exp DO cicle_body','for_stmt',6,'p_for_stmt_downto','pascal_yacc.py',366),
]
